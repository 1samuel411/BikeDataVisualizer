#pragma checksum "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\Home\index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "89cb63842b4b7bbd3734853fb9dc7362e0a9045e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_index), @"mvc.1.0.view", @"/Views/Home/index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/index.cshtml", typeof(AspNetCore.Views_Home_index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\_ViewImports.cshtml"
using BikeDataVisualizer;

#line default
#line hidden
#line 2 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\_ViewImports.cshtml"
using BikeDataVisualizer.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"89cb63842b4b7bbd3734853fb9dc7362e0a9045e", @"/Views/Home/index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"97592f98abd1cd4df04ffadb0ffe63303ca85742", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DataVisualizationModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\Home\index.cshtml"
  
    ViewData["Title"] = "Data Visualization";

#line default
#line hidden
            BeginContext(85, 1920, true);
            WriteLiteral(@"
<div class=""split left"">
    <!-- Metric Box (1) -->
    <div class=""metric-box"">
        <div class=""metric-box-body"">
            <p class=""metric-box-title""> Average Bike Ride Duration Based on Month </p>
        </div>
        <div class=""metric-box-body"">
            <div id=""avgDurationMonth"" style=""height: 250px;""></div>
        </div>
    </div>

    <!-- Metric Box (3) -->
    <div class=""metric-box"">
        <div class=""metric-box-body"">
            <p class=""metric-box-title""> Passholder Activity </p>
        </div>
        <div class=""metric-box-body"">
            <div id=""passholderActivity"" style=""height: 250px;""></div>
        </div>
    </div>

    <!-- Metric Box (4) -->
    <div class=""metric-box"">
        <div class=""metric-box-body"">
            <p class=""metric-box-title""> Profit From Overages Based on Passholder </p>
        </div>
        <div class=""metric-box-body"">
            <p style=""margin-left:10px;margin-right:10px;""><i>Based on $1.75 overages for a");
            WriteLiteral(@"ll passes except Walk-Ups which are $3.50 in overages. Excludes Staff Annual Passes</i></p>
            <div id=""passholderProfit"" style=""height: 250px;""></div>
        </div>
    </div>

    <!-- Metric Box (5) -->
    <div class=""metric-box"">
        <div class=""metric-box-body"">
            <p class=""metric-box-title""> Top 5 Start/Stop Stations with Most Activity </p>
        </div>
        <div class=""metric-box-body"">
            <div id=""startStationTraffic"" style=""height: 250px;""></div>
            <div id=""endStationTraffic"" style=""height: 250px;""></div>
        </div>
    </div>

    <!-- Metric Box (6) -->
    <div class=""metric-box"">
        <div class=""metric-box-body"">
            <p class=""metric-box-title""> Average Distance Traveled Per Season </p>
        </div>
        <div class=""metric-box-body"">
            <div class=""metric-box-percentage"">");
            EndContext();
            BeginContext(2006, 60, false);
#line 55 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\Home\index.cshtml"
                                          Write(Html.Raw(Model.averageDistTraveled.ToString() + " (meters)"));

#line default
#line hidden
            EndContext();
            BeginContext(2066, 300, true);
            WriteLiteral(@"</div>
        </div>
    </div>

    <!-- Metric Box (7) -->
    <div class=""metric-box"">
        <div class=""metric-box-body"">
            <p class=""metric-box-title""> Regular Riders </p>
        </div>
        <div class=""metric-box-body"">
            <div class=""metric-box-percentage"">");
            EndContext();
            BeginContext(2367, 52, false);
#line 65 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\Home\index.cshtml"
                                          Write(Html.Raw(Model.regularRiders.ToString() + " riders"));

#line default
#line hidden
            EndContext();
            BeginContext(2419, 942, true);
            WriteLiteral(@"</div>
        </div>
    </div>

    <!-- Metric Box (8) -->
    <div class=""metric-box"">
        <div class=""metric-box-body"">
            <p class=""metric-box-title""> Daily Activity </p>
        </div>
        <div class=""metric-box-body"">
            <div id=""hourlyActivity"" style=""height: 200px;""></div>
        </div>
    </div>
</div>

<div class=""split right"">
    <div class=""heatMap-holder"">
        <div id=""chart_div"" style=""height:100%; width:100%;""></div>
        <!--<img class=""heatMap-image"" src=""https://dev.virtualearth.net/REST/V1/Imagery/Map/Road/Bellevue%20Washington?mapLayer=TrafficFlow&mapSize=700,1000&key=Al83IEJVmD_pcR5P1uJ4EdIYbfU0afVBw0O0Ei0g4zThs__Exh84_1mhfZ9YGSih"" />
        -->
    </div>
</div>


<script type=""text/javascript"">
    google.charts.load('current', { 'packages': ['corechart', 'sankey'] });
    google.charts.setOnLoadCallback(drawCharts);
    var durationsData = ");
            EndContext();
            BeginContext(3362, 53, false);
#line 92 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\Home\index.cshtml"
                   Write(Html.Raw(Json.Serialize(Model.durationsBasedOnMonth)));

#line default
#line hidden
            EndContext();
            BeginContext(3415, 32, true);
            WriteLiteral(";\r\n    var passholderActivity = ");
            EndContext();
            BeginContext(3448, 50, false);
#line 93 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\Home\index.cshtml"
                        Write(Html.Raw(Json.Serialize(Model.passholderActivity)));

#line default
#line hidden
            EndContext();
            BeginContext(3498, 30, true);
            WriteLiteral(";\r\n    var passholderProfit = ");
            EndContext();
            BeginContext(3529, 50, false);
#line 94 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\Home\index.cshtml"
                      Write(Html.Raw(Json.Serialize(Model.passholderOverages)));

#line default
#line hidden
            EndContext();
            BeginContext(3579, 33, true);
            WriteLiteral(";\r\n    var startStationTraffic = ");
            EndContext();
            BeginContext(3613, 51, false);
#line 95 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\Home\index.cshtml"
                         Write(Html.Raw(Json.Serialize(Model.startStationTraffic)));

#line default
#line hidden
            EndContext();
            BeginContext(3664, 31, true);
            WriteLiteral(";\r\n    var endStationTraffic = ");
            EndContext();
            BeginContext(3696, 49, false);
#line 96 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\Home\index.cshtml"
                       Write(Html.Raw(Json.Serialize(Model.endStationTraffic)));

#line default
#line hidden
            EndContext();
            BeginContext(3745, 37, true);
            WriteLiteral(";\r\n    var averageDistanceTraveled = ");
            EndContext();
            BeginContext(3783, 51, false);
#line 97 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\Home\index.cshtml"
                             Write(Html.Raw(Json.Serialize(Model.averageDistTraveled)));

#line default
#line hidden
            EndContext();
            BeginContext(3834, 28, true);
            WriteLiteral(";\r\n    var hourlyActivity = ");
            EndContext();
            BeginContext(3863, 46, false);
#line 98 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\Home\index.cshtml"
                    Write(Html.Raw(Json.Serialize(Model.hourlyActivity)));

#line default
#line hidden
            EndContext();
            BeginContext(3909, 23, true);
            WriteLiteral(";\r\n    var locations = ");
            EndContext();
            BeginContext(3933, 48, false);
#line 99 "C:\Users\Samuel Arminana\Documents\Websites\BikeDataVisualizer\BikeDataVisualizer\BikeDataVisualizer\Views\Home\index.cshtml"
               Write(Html.Raw(Json.Serialize(Model.stationLocations)));

#line default
#line hidden
            EndContext();
            BeginContext(3981, 5573, true);
            WriteLiteral(@";

    function drawCharts() {
        // --------------------------------------------------------------------------------
        // ------------------------------- 1 ----------------------------------------------
        // --------------------------------------------------------------------------------
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Month');
        data.addColumn('number', 'Duration');
        for (i = 0; i < durationsData.length; i++) {
            data.addRow([durationsData[i].data[0], durationsData[i].data[1]]);
        }
        var options = {
            title: 'Bike Duration Averages (minutes)',
            legend: 'none'
        };
        var chart = new google.visualization.LineChart(document.getElementById('avgDurationMonth'));
        chart.draw(data, options);

        // --------------------------------------------------------------------------------
        // ------------------------------- 3 ------------------");
            WriteLiteral(@"----------------------------
        // --------------------------------------------------------------------------------
        data = new google.visualization.DataTable();
        data.addColumn('string', 'Pass');
        data.addColumn('number', 'Times Used');
        for (i = 0; i < passholderActivity.length; i++) {
            data.addRow([passholderActivity[i].data[0], passholderActivity[i].data[1]]);
        }
        options = {
            slices: {
                0: { offset: 0.2 },
                1: { offset: 0.3 },
                2: { offset: 0.4 }
            },
            legend: { position: 'bottom' }
        };
        chart = new google.visualization.PieChart(document.getElementById('passholderActivity'));
        chart.draw(data, options);

        // --------------------------------------------------------------------------------
        // ------------------------------- 4 ----------------------------------------------
        // -----------------------------------");
            WriteLiteral(@"---------------------------------------------
        data = new google.visualization.DataTable();
        data.addColumn('string', 'Pass');
        data.addColumn('number', 'Profit ($)');
        for (i = 0; i < passholderProfit.length; i++) {
            data.addRow([passholderProfit[i].data[0], passholderProfit[i].data[1]]);
        }
        options = {
            legend: { position: 'top' }
        };
        chart = new google.visualization.BarChart(document.getElementById('passholderProfit'));
        chart.draw(data, options);


        // --------------------------------------------------------------------------------
        // ------------------------------- 5 ----------------------------------------------
        // --------------------------------------------------------------------------------
        data = new google.visualization.DataTable();
        data.addColumn('string', 'Station');
        data.addColumn('number', 'Activity');
        for (i = 0; i < startStationTraf");
            WriteLiteral(@"fic.length; i++) {
            data.addRow([startStationTraffic[i].data[0], startStationTraffic[i].data[1]]);
        }
        options = {
            title: 'Start Stations',
            legend: { position: 'top' }
        };
        chart = new google.visualization.BarChart(document.getElementById('startStationTraffic'));
        chart.draw(data, options);

        data = new google.visualization.DataTable();
        data.addColumn('string', 'Station');
        data.addColumn('number', 'Activity');
        for (i = 0; i < endStationTraffic.length; i++) {
            data.addRow([endStationTraffic[i].data[0], endStationTraffic[i].data[1]]);
        }
        options = {
            title: 'End Stations',
            legend: { position: 'top' }
        };
        chart = new google.visualization.BarChart(document.getElementById('endStationTraffic'));
        chart.draw(data, options);

        // --------------------------------------------------------------------------------
        ");
            WriteLiteral(@"// ------------------------------- 8 ----------------------------------------------
        // --------------------------------------------------------------------------------
        data = new google.visualization.DataTable();
        data.addColumn('string', 'Hour');
        data.addColumn('number', 'Activity');
        for (i = 0; i < hourlyActivity.length; i++) {
            data.addRow([hourlyActivity[i].data[0], hourlyActivity[i].data[1]]);
        }
        options = {
            vAxis: { textPosition: 'none' },
            legend: 'none'
        };
        chart = new google.visualization.LineChart(document.getElementById('hourlyActivity'));
        chart.draw(data, options);
    }
</script>

<!-- Map -->
<script>
    google.charts.load('current', { 'packages': ['map'] });
    google.charts.setOnLoadCallback(drawMap);

    function drawMap() {
        var data = new google.visualization.DataTable();
        data.addColumn('number', 'Lat');
        data.addColumn('number', 'L");
            WriteLiteral(@"ong');
        data.addColumn('string', 'Name');
        for (i = 0; i < locations.length; i++) {
            data.addRow([locations[i].data[0], locations[i].data[1], locations[i].data[2]]);
        }

        var options = {
            showTooltip: true,
            showInfoWindow: true
        };

        var map = new google.visualization.Map(document.getElementById('chart_div'));

        map.draw(data, options);
    };
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DataVisualizationModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
